#include <iostream>
#include <ctime>
#include "Linear_solve.hpp"

int main();

int main() {

    double B_arr[10][10]{
            { 6.089502917902452e+00, 7.218673877078088e-01, 6.777704853247750e-01, 4.068304308354909e-01, 6.700134299123348e-01,
                    -2.752482138616758e-01, 6.820532620920170e-01, 3.320679716578119e-01, 7.852919389703084e-01, -5.383597975402287e-01},
            { 9.756932964842067e-01, 5.598109420440760e+00, -1.298808125772336e-01, 5.933288928742406e-01, 1.729855756280778e-01,
                    -8.926268302977926e-01, 1.970667845259544e-02, 4.970276193619976e-01, -6.730836226491611e-01, -6.437760921154553e-01},
            { 7.726663749191292e-01, -2.583732462620522e-01, 7.703186154416180e+00, 1.949052232709840e-01, -8.402616198498433e-01,
                    8.155654202627427e-01, -4.508003295967259e-01, -5.419570324058901e-01, -7.613642809711080e-01, 1.136929106562679e-01},
            {-6.736587924240497e-01, -4.098793192589331e-01, 4.650508879962707e-01, 4.832719768530926e+00, -2.313071417601303e-01,
                    -7.973300288795049e-02, 2.066578561349981e-01, -4.752104251804300e-01, 9.076180780787255e-01, -3.836042648094381e-01},
            { 6.522519709579382e-01, 4.139804998922276e-01, 3.315733471823916e-01, -1.755969058743340e-01, 5.692261929571923e+00,
                    -9.306515113325967e-01, 7.706764570939224e-01, 5.215716631723044e-01, -8.224181192033061e-01, 7.354145486290165e-02},
            {-4.901212464174901e-01, -5.159386842478552e-01, -1.685294832913545e-01, -6.370249104760458e-01, 9.265139991305409e-01,
                    7.949110490692020e+00, -3.789174550576887e-01, -8.099718262113828e-01, -8.243465200897221e-01, 6.012010436316779e-01},
            { 7.229876635262618e-01, -1.813898445773604e-01, 6.682100500362340e-01, 1.230645154989061e-01, 9.671672906331099e-01,
                    2.153787042602211e-01, 5.100988111130929e+00, -5.712904457714364e-01, -1.076629089764335e-01, -2.546709434974842e-01},
            {-7.713770738813508e-02, -7.803092740281053e-01, 3.761075409079528e-02, 7.413300517797263e-01, 4.559181457423118e-01,
                    -5.216896505933714e-01, -1.087250546549031e-01, 4.579346882176198e+00, 5.371791605368292e-02, -5.338082540518746e-01},
            {-5.790093255133327e-01, -5.769714417550574e-01, 8.859720356456744e-01, -9.040477297394630e-01, -1.799264030901138e-03,
                    7.242062535601568e-01, -4.882298947663618e-01, 6.069547627201659e-01, 6.623886332961827e+00, 8.566956252307132e-01},
            { 5.947706084297502e-01, 5.886406901838892e-01, 2.890705251904657e-01, 3.331439418365978e-02, 6.330788316965961e-01,
                    6.591202602203505e-01, 7.332797417149244e-01, 2.859445452249156e-01, 9.323563867456042e-01, 5.749575983590156e+00}
    };
    matrix B{ matrix::make_matrix<10,10>( B_arr ) };
    std::cout.precision( 16 );
    double a_arr[10]{
            -0.5099625020876898,
            -0.8591842762334169,
            0.4923986237795619,
            0.2770386057823075,
            -0.8284978556341082,
            0.09954063270747349,
            0.9684607577765041,
            0.1933989394840556,
            -0.3176202010795363,
            -0.06905718316128884
    };




    //std::cout<<B.solve(a)<<std::endl;

    double A[100]{
            6.089502917902452e+00, 7.218673877078088e-01, 6.777704853247750e-01, 4.068304308354909e-01, 6.700134299123348e-01,
            -2.752482138616758e-01, 6.820532620920170e-01, 3.320679716578119e-01, 7.852919389703084e-01, -5.383597975402287e-01,
            9.756932964842067e-01, 5.598109420440760e+00, -1.298808125772336e-01, 5.933288928742406e-01, 1.729855756280778e-01,
            -8.926268302977926e-01, 1.970667845259544e-02, 4.970276193619976e-01, -6.730836226491611e-01, -6.437760921154553e-01,
            7.726663749191292e-01, -2.583732462620522e-01, 7.703186154416180e+00, 1.949052232709840e-01, -8.402616198498433e-01,
            8.155654202627427e-01, -4.508003295967259e-01, -5.419570324058901e-01, -7.613642809711080e-01, 1.136929106562679e-01,
            -6.736587924240497e-01, -4.098793192589331e-01, 4.650508879962707e-01, 4.832719768530926e+00, -2.313071417601303e-01,
            -7.973300288795049e-02, 2.066578561349981e-01, -4.752104251804300e-01, 9.076180780787255e-01, -3.836042648094381e-01,
            6.522519709579382e-01, 4.139804998922276e-01, 3.315733471823916e-01, -1.755969058743340e-01, 5.692261929571923e+00,
            -9.306515113325967e-01, 7.706764570939224e-01, 5.215716631723044e-01, -8.224181192033061e-01, 7.354145486290165e-02,
            -4.901212464174901e-01, -5.159386842478552e-01, -1.685294832913545e-01, -6.370249104760458e-01, 9.265139991305409e-01,
            7.949110490692020e+00, -3.789174550576887e-01, -8.099718262113828e-01, -8.243465200897221e-01, 6.012010436316779e-01,
            7.229876635262618e-01, -1.813898445773604e-01, 6.682100500362340e-01, 1.230645154989061e-01, 9.671672906331099e-01,
            2.153787042602211e-01, 5.100988111130929e+00, -5.712904457714364e-01, -1.076629089764335e-01, -2.546709434974842e-01,
            -7.713770738813508e-02, -7.803092740281053e-01, 3.761075409079528e-02, 7.413300517797263e-01, 4.559181457423118e-01,
            -5.216896505933714e-01, -1.087250546549031e-01, 4.579346882176198e+00, 5.371791605368292e-02, -5.338082540518746e-01,
            -5.790093255133327e-01, -5.769714417550574e-01, 8.859720356456744e-01, -9.040477297394630e-01, -1.799264030901138e-03,
            7.242062535601568e-01, -4.882298947663618e-01, 6.069547627201659e-01, 6.623886332961827e+00, 8.566956252307132e-01,
            5.947706084297502e-01, 5.886406901838892e-01, 2.890705251904657e-01, 3.331439418365978e-02, 6.330788316965961e-01,
            6.591202602203505e-01, 7.332797417149244e-01, 2.859445452249156e-01, 9.323563867456042e-01, 5.749575983590156e+00
    };
    std::cout.precision( 16 );
    Linear_solve obj{ A, 10 };
    double target[10]{
            -0.5099625020876898,
            -0.8591842762334169,
            0.4923986237795619,
            0.2770386057823075,
            -0.8284978556341082,
            0.09954063270747349,
            0.9684607577765041,
            0.1933989394840556,
            -0.3176202010795363,
            -0.06905718316128884
    };
    double soln[10];




    unsigned int score = 0;

    long start{ std::time( nullptr ) };
    for ( unsigned int count{0}; count < 100; ++count ) {
        target[std::rand() % 10] += 0.1*((2.0*rand())/RAND_MAX - 1.0); // Change one entry in the target vector
        vector a{ 10, target };
        obj.solve( target, soln ); // Solve the system of linear equations
        vector soln_vec{ 10, soln };

        if(abs( soln_vec.norm() - B.solve(a).norm() ) <= 1E-12)
            score++;

    }

    std::cout<<"SCORE IS: "<<score<<std::endl;

    std::cout << (std::time( nullptr ) - start) << std::endl; // print out the time elapsed
    for ( unsigned int k{0}; k < 10; ++k ) { // print out the last target vector
        std::cout << target[k] << " ";
    }
    std::cout << std::endl;
    for ( unsigned int k{0}; k < 10; ++k ) { // print out the last solution vector
        std::cout << soln[k] << " ";
    }
    std::cout << std::endl;
    return 0;
}
